#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass amsart
\begin_preamble
\usepackage{listings}
\usepackage{color}
\usepackage{textcomp}
\definecolor{listinggray}{gray}{0.9}
\definecolor{lbcolor}{rgb}{0.9,0.9,0.9}
\lstset{
    language=Java,
    basicstyle=\scriptsize,
    upquote=true,
    aboveskip={1.5\baselineskip},
    columns=fullflexible,
    showstringspaces=false,
    extendedchars=true,
    breaklines=true,
    showtabs=false,
    showspaces=false,
    showstringspaces=false,
    identifierstyle=\ttfamily,
    keywordstyle=\color[rgb]{0,0,1},
    commentstyle=\color[rgb]{0.133,0.545,0.133},
    stringstyle=\color[rgb]{0.627,0.126,0.941},
}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style swiss
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\backslash
includegraphics[scale=0.5]{prova2} 
\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Title
Editor per Automi Cellulari
\end_layout

\begin_layout Author
Domenico Bruzzese
\begin_inset Newline newline
\end_inset

Fabio Capirchio
\begin_inset Newline newline
\end_inset

Gabriele Fraracci
\begin_inset Newline newline
\end_inset

Leonardo Emili
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduzione
\end_layout

\begin_layout Standard
Il progetto consiste nella creazione di un editor per automi cellulari e
 di una GUI.
 L'intero progetto è fortemente 
\begin_inset Formula $user-oriented$
\end_inset

, l'editor lascia libero l'utente di personalizarne ogni aspetto: dalla
 personalizzazione grafica fino a quella strutturale che gestisce il flusso
 della simulazione.
\begin_inset Newline newline
\end_inset

L'idea è quella di eseguire una simulazione che utilizzi i concetti di multithre
ading, concorrenza nonché i pilastri della 
\begin_inset Formula $OOP$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
bigskip
\end_layout

\begin_layout Plain Layout


\backslash
bigskip
\end_layout

\end_inset


\end_layout

\begin_layout Section
Tecnologie utilizzate
\end_layout

\begin_layout Standard
L'intero progetto è stato scritto in 
\begin_inset Formula $Java$
\end_inset

 9, assieme a: 
\begin_inset Formula $JavaFx$
\end_inset

 utilizzato per creare la GUI, 
\begin_inset Formula $FXML$
\end_inset

 che ha contribuito ha formare la struttura del programma, 
\begin_inset Formula $CSS$
\end_inset

 per le personalizzazioni grafiche, 
\begin_inset Formula $LaTex$
\end_inset

 per la stesura di questa relazione, 
\begin_inset Formula $Python$
\end_inset

 e 
\begin_inset Formula $Gimp$
\end_inset

 per la gestione e il ritocco delle immagini.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
bigskip
\end_layout

\begin_layout Plain Layout


\backslash
bigskip
\end_layout

\end_inset


\end_layout

\begin_layout Section
Guida all'uso
\end_layout

\begin_layout Standard
Il programma ha un'interfaccia semplice e intuitiva ed è organizzato in
 tre stadi logici: un primo stadio dove l'utente sceglie in che modalitá
 eseguire il programma, un secondo stadio dove vengono recuperate le informazion
i necessarie affinché la simulazione possa iniziare, ed infine un ultimo
 stadio di interazione con il simulatore.
\end_layout

\begin_layout Subsection
Schermata di benvenuto
\end_layout

\begin_layout Subsubsection
Crea nuovo profilo: l'utente viene guidato in una procedura che gli permette
 di personalizzare i colori associati agli stati e le direttive che regolano
 lo sviluppo dell'automa.
 Al termine viene chiesto all'utente se si desidera preservare queste configuraz
ioni per poterle riutilizzare in futuro, in caso contrario verrá creata
 una "shallow copy" delle configurazioni che verrá poi distrutta al termine
 dell'esecuzione del programma.
\end_layout

\begin_layout Subsubsection
Carica profilo: il programma carica le configurazioni utente giá esistenti
 per essere poi fornite al simulatore.
\end_layout

\begin_layout Subsubsection
Scegli automa: viene visualizzata una raccolta di automi cellulari con configura
zioni e colori di default.
\end_layout

\begin_layout Subsection
Schermata degli input
\end_layout

\begin_layout Standard
In questa sezione l'utente è libero di scegliere gli stati delle cellule
 attraverso un'idea piú intuitiva: la scelta dei colori che le cellule dovranno
 avere, in questo modo si interagisce direttamente con il loro ciclo di
 vita.
 È inoltre possibile personalizzare i principi che regolano le transizioni
 di stato.
\begin_inset Newline newline
\end_inset

Queste idee verranno trattate in maniera piú dettagliata nei paragrafi successiv
i.
\end_layout

\begin_layout Subsection
Schermata del simulatore
\end_layout

\begin_layout Standard
Il protagonista è la ''tela'' del quadro, dove avviene la scena e dove è
 possibile assistere alla simulazione.
 Questa è circondata ai lati da pulsanti che regolano le configurazioni
 iniziali, mentre all'estremo inferiore sono localizzati i pulsanti di controllo
 con i quali è possibile interagire direttamente con la simulazione, o salvare
 il programma creato.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Automi cellulari
\end_layout

\begin_layout Standard
Nel seguito assumiamo che ciascuna cellula appartenga ad un unico stato,
 i motivi legati a questo dettaglio sono molteplici e la ragione apparirá
 piú chiara nel 
\emph on
paragrafo 6
\emph default
 dove la questione viene trattata piú nel dettaglio.
 
\begin_inset Newline newline
\end_inset

Nel testo viene inoltre utilizzata frequentemente la nozione di 
\emph on
vicino
\emph default
 fornita da 
\emph on
Edward Forrest Moore
\emph default
, pioniere della 
\emph on
teoria degli automi cellulari
\emph default
: il vicinato di una cella 
\begin_inset Formula $C$
\end_inset

 è composto da 9 celle, la cella centrale 
\begin_inset Formula $C$
\end_inset

 e dalle 8 celle che lo circondano.
\end_layout

\begin_layout Subsection
Game of Life
\end_layout

\begin_layout Standard
L'automa sviluppato dal matematico 
\emph on
John Conway
\emph default
 è uno dei pilastri della collezione, l'apparente semplicitá con cui regole
 e stati vengono definiti porta all'occhio non pochi risvolti teorici.
 La scena si svolge su una griglia bidimensionale formata da cellule che
 possono assumere soltanto due stati: vivo o morto.
 Le regole di transizione adottate sono le stesse definite in origine dal
 matematico britannico:
\end_layout

\begin_layout Itemize
La cellula che si trova nello stato morto e conta esattamente tre cellule
 vive nel suo vicinato transisce nello stato vivo.
\end_layout

\begin_layout Itemize
La cellula che si trova nello stato vivo e che ha o un numero di vicini
 maggiore strettamente di tre oppure numero di vicini minore strettamente
 di due transisce nello stato morto.
\end_layout

\begin_layout Itemize
La cellula che si trova nello stato vivo e conta un numero di vicini pari
 a due o tre sopravvive alla prossima generazione rimanendo nello stesso
 stato.
\end_layout

\begin_layout Subsection
Circular Redistribution
\end_layout

\begin_layout Standard
Si presenta in aggiunta un nuovo automa a cui è stato dato il nome 
\emph on
Circular Redistribution
\emph default
, essendo nato dall'unione di regole per l'eccitamento di una cella con
 un 
\emph on
blur
\emph default
 circolare basato su una semplificazione delle funzioni trigonometriche
 per selezionare uno dei vicini della cella sulla quale si eseguono le varie
 computazioni.
 
\begin_inset Newline newline
\end_inset

Lo stato iniziale assegnato ad una cella è un valore preso nell'intervallo
 [0, 
\begin_inset Formula $\ldots$
\end_inset

 ,1] tramite il quale viene assegnato un colore in scala di grigi che riflette
 lo stato scelto.
\begin_inset Newline newline
\end_inset

L'algoritmo applicato dall'automa è il seguente:
\end_layout

\begin_layout Enumerate
Per ogni cella, si calcola la somma 
\begin_inset Formula $S$
\end_inset

 dello stato assegnato ad ognuno dei vicini di 
\emph on
rango 1
\emph default
 della cella corrente.
\end_layout

\begin_layout Enumerate
Due valori, 
\emph on

\begin_inset Formula $MinThreshold$
\end_inset


\emph default
 e 
\emph on

\begin_inset Formula $MaxThreshold$
\end_inset


\emph default
 vengono utilizzati per determinare se la cella è in stato di 
\emph on
eccitazione
\emph default
 o meno.
 Si ottiene una cella in stato di eccitazione se 
\emph on

\begin_inset Formula $MinThreshold$
\end_inset


\emph default
 
\begin_inset Formula $<$
\end_inset

 
\begin_inset Formula $S$
\end_inset

 
\begin_inset Formula $<$
\end_inset

 
\emph on

\begin_inset Formula $MaxThreshold$
\end_inset


\emph default
.
\end_layout

\begin_layout Enumerate
La somma 
\begin_inset Formula $S$
\end_inset

 dei valori di una cella eccitata viene trasformata in un 
\emph on
angolo
\emph default
, utilizzato per selezionare uno degli otto vicini di 
\emph on
Moore
\emph default
 della cella eccitata.
 Una volta selezionato il vicino, si interpolerà il valore dello stato della
 cella eccitata con il valore dello stato della cella selezionata, tramite
 l'utilizzo di una variabile definita 
\series bold
\emph on
interpolation
\series default
\emph default
.
\end_layout

\begin_layout Enumerate
L'angolo utilizzato viene salvato all'interno della cella 
\emph on
eccitata
\emph default
, di modo che nell'iterazione successiva l'angolo calcolato tramite la nuova
 somma dei valori verrà sommato all'angolo precedentemente trovato, creando
 appunto una 
\series bold
\emph on
rotazione
\series default
\emph default
 delle celle scelte per il 
\emph on
blur
\emph default
 che ha dato il nome all'automa presentato.
\end_layout

\begin_layout Standard
Utilizzando una configurazione iniziale nella quale la griglia è composta
 di colori casuali esclusivamente neri o bianchi con una distribuzione di
 almeno il 50% di elementi bianchi si ottiene una struttura che a seguito
 delle prime cinquecento generazioni tende a creare cluster simili alle
 simulazioni ottenute con gli algoritmi di 
\emph on
marching squares.
\begin_inset Newline newline
\end_inset

Non è ancora chiaro se la struttura cellulare che si genera con questo tipo
 di configurazioni è destinata o meno a stabilizzarsi nel corso di un numero
 finito di generazioni, tramite sperimentazioni su un lasso di tempo prolungato
 le dimensioni dei cluster sembrano crescere fino a stabilizzarsi, ma l'evoluzio
ne del loro movimento lungo la griglia è continuo.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename IMG_FIGHE/4.circular
	scale 60
	groupId imgfighe

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset

 
\shape italic
Figura 1: Circular Redistribution
\shape default
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Cyclic CA
\end_layout

\begin_layout Standard
Inizialmente sviluppati da 
\emph on
David Griffeath
\emph default
 all'università del Wisconsin, gli automi cellulari ciclici esibiscono un
 complesso sistema di auto - organizzazione iterando una regola estremamente
 semplice su di una matrice di stati.
 Un numero 
\emph on

\begin_inset Formula $n$
\end_inset


\emph default
 di possibili stati viene scelto a priori, che verranno rappresentati tramite
 una scala cromatica di colori, uno per ogni stato.
 Ad ogni iterazione ciascuno 
\emph on
stato/colore
\emph default
 puo' avanzare esclusivamente al suo 
\series bold
stato successivo
\series default
, l'ultimo dei quali ritorna al primo, in modo ciclico.
\begin_inset Newline newline
\end_inset

Le regole di sviluppo dell'automa seguono la notazione 
\series bold
\emph on
R/T/C/N
\series default
\emph default
 :
\end_layout

\begin_layout Itemize

\series bold
\emph on
R
\series default
 
\emph default
specifica il rango della ricerca dei vicini all'interno della griglia sul
 quale si simula l'automa, per 
\emph on
R=1
\emph default
 saranno dunque visitate tutte le celle a distanza 1 dalla cella sulla quale
 si stanno applicando le regole.
\end_layout

\begin_layout Itemize

\series bold
\emph on
T
\series default
\emph default
 specifica una soglia (
\emph on
threshold
\emph default
) che indica il minimo numero di celle adiacenti che hanno il 
\emph on
colore/stato
\emph default
successivo necessario alla cella corrente per avanzare allo stato successivo.
\end_layout

\begin_layout Itemize

\series bold
\emph on
C
\series default
\emph default
 specifica il numero di possibili stati 
\emph on

\begin_inset Formula $n$
\end_inset


\emph default
 presenti nella griglia.
 Ad ognuno di questi sarà automaticamente assegnato un colore specifico
 della scala cromatica.
\end_layout

\begin_layout Itemize

\series bold
\emph on
N
\series default
\emph default
 discrimina la regola utilizzata per selezionare i vicini, che puo' essere
 
\series bold
\emph on
extended Moore 
\series default
\emph default
oppure 
\series bold
\emph on
von Neumann
\series default
\emph default
.
 In questa si è deciso di utilizzare esclusivamente l'
\emph on
Extended Moore 
\emph default
essendo questo quello più affine alla creazione di pattern a seguito del
 cambio delle tre regole precedenti.
\end_layout

\begin_layout Standard
La condizione iniziale da preferirsi per godere al meglio di questa simulazione
 è quella in cui viene assegnato un colore casuale ad ogni cella della griglia,
 sia questo una 
\emph on
tupla (r,g,b)
\emph default
 oppure un colore in scala grigi.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset

 
\begin_inset Graphics
	filename IMG_FIGHE/3.cyclic
	scale 60
	groupId imgfighe

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset

 
\shape italic
Figura 2: Cyclic CA
\shape default
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Diffusion Aggregation
\end_layout

\begin_layout Standard
Diffusion Aggregation è una simulazione semplificata di un processo conosciuto
 come 
\emph on
Diffusion-Limited Aggregation
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
La teoria fu proposta inizialmente da T.A.
 Witten Jr.
 nel 1981 (Witten, T.
 A.; Sander, L.
 M.
 (1981).
 "Diffusion-Limited Aggregation, a Kinetic Critical Phenomenon".
 Physical Review Letters.
 47 (19): 14001403.
 Bibcode:1981PhRvL..47.1400W.
 doi:10.1103/PhysRevLett.47.1400).
\end_layout

\end_inset

.
 Processo tramite il quale particelle che percorrono un random walk secondo
 un movimento Browniano formano cluster aggregati di complesse ed ordinate
 strutture ad albero.
 
\begin_inset Newline newline
\end_inset

Inizialmente una griglia vuota viene occupata da un numero casuale di celle
 il cui stato iniziale è 
\emph on
in movimento
\emph default
, si assegna inoltre alla cella al centro della griglia lo stato 
\emph on
aggregata.
\begin_inset Newline newline
\end_inset


\emph default
Ad ogni cella 
\emph on
in movimento
\emph default
 viene assegnato un colore che descrive una delle 8 possibili direzioni
 (sempre secondo il 
\emph on
Moore neighborhood
\emph default
) in cui la cella sta viaggiando.
 Nel caso in cui due celle 
\emph on
in movimento
\emph default
 dovessero scontrarsi, viene assegnata una direzione causale differente
 ad entrambe per permettergli di continuare il loro viaggio.
 Se invece una cella entra in contatto con altra il cui stato è 
\emph on
aggregata
\emph default
, anche lei muterá in 
\emph on
aggregata
\emph default
.
 Si stabilisce un contatto quando una cella in movimento diventa una vicina
 di una cella aggregata.
 All'aumentare delle celle 
\emph on
aggregate
\emph default
 segue il diminuire delle celle in movimento rimaste, la simulazione terminerà
 con l'assegnazione dello stato 
\emph on
aggregata
\emph default
 al totale delle celle iniziali presenti all'interno della griglia.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename IMG_FIGHE/2.diffagg
	scale 60
	groupId imgfighe

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset

 
\shape italic
Figura 3: Diffusion Aggregation
\shape default
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
H3 Rule
\begin_inset Foot
status open

\begin_layout Plain Layout
H3-Rule è una simulazione dell'automa cellulare elementare 1-Dimensionale
 riferito tramite il suo Wolfram code, una convenzione inventata da Wolfram
 tramite la quale sono presenti fino a 256 possibili regole (http://mathworld.wol
fram.com/ElementaryCellularAutomaton.html)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
È la classe di automi più semplice nella quale ogni cella possiede uno dei
 due possibili valori, 0 o 1.
 L'evoluzione di una cella dell'automa alla generazione successiva è interamente
 specificata dai valori delle due celle adiacenti e dallo stato attuale
 della cella, ottenendo dunque un massimo di duecentocinquantasei possibili
 combinazioni.
 Si parte da una prima 
\emph on
riga
\emph default
 nella superiore della griglia in cui viene mostrata la prima generazione
 dell'automa, ad ogni iterazione la riga successiva calcolerà gli stati
 della nuova generazione, e così via.
\begin_inset Newline newline
\end_inset

La regola utilizzata è la n° 182, che presenta un'evoluzione che ricalca
 il famoso 
\series bold
\emph on
triangolo di Sierpinski
\series default
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
Wacław Franciszek Sierpiński (Varsavia, 14 marzo 1882 - Varsavia, 21 ottobre
 1969) è stato un matematico polacco.
 Egli è ampiamente conosciuto per i suoi contributi nella teoria degli insiemi
 ed per le sue scoperte, tra cui: il numero e il triangolo di Sierpiński.
\end_layout

\end_inset

.
 Per visualizzare questo risultato è necessario impostare la condizione
 iniziale della griglia che assegna ad una sola cella lo stato 1, che sarà
 la cella centrale della prima riga in alto della griglia.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset


\begin_inset Graphics
	filename IMG_FIGHE/1.h3

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\end_inset

 
\shape italic
Figura 1: H3 Rule
\shape default
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Code Snippets
\end_layout

\begin_layout Example
Il seguente metodo mostra un possibile uso della Reflection.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

    private void comeToMeCA(String className) {
\end_layout

\begin_layout Plain Layout

	try {
\end_layout

\begin_layout Plain Layout

		Class<?> C = CellularAutomataProgram.class.forName("simulatorWindow.programs."
 + className);
\end_layout

\begin_layout Plain Layout

		CellularAutomataProgram currentProgram = CellularAutomataProgram.class.cast(C.get
Constructor().newInstance());             		
\end_layout

\begin_layout Plain Layout

		simulator.setProgram(currentProgram);
\end_layout

\begin_layout Plain Layout

	} catch (ClassNotFoundException e) {
\end_layout

\begin_layout Plain Layout

		System.out.println("Class " + className + " has not been defined.");
\end_layout

\begin_layout Plain Layout

	} catch (NoSuchMethodException e) {
\end_layout

\begin_layout Plain Layout

		System.out.println("Constructor not found");
\end_layout

\begin_layout Plain Layout

	} catch (IllegalAccessException e) {
\end_layout

\begin_layout Plain Layout

		System.out.println(e.getMessage());
\end_layout

\begin_layout Plain Layout

	} catch (InstantiationException e) {
\end_layout

\begin_layout Plain Layout

		System.out.println(e.getMessage());
\end_layout

\begin_layout Plain Layout

	} catch (InvocationTargetException e) {
\end_layout

\begin_layout Plain Layout

		System.out.println(e.getMessage());
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Example
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Teoria degli stati e delle transizioni
\end_layout

\begin_layout Standard
Lo scenario precedentemente descritto si basa su due concetti principali:
 stati e regole di transizione.
 
\end_layout

\begin_layout Subsection
Gli stati
\end_layout

\begin_layout Standard
L’idea di base è che ciasuna cellula al momento della creazione vie- ne
 associata a uno stato che ne regola lo sviluppo.
 Si noti come in questo modello gli stati non sono solo semplici proprietá
 di cui ogni cellula dispone, bensí essi sono parte attiva dell’evoluzione
 dell’automa.
 Questo implica che in un qualsiasi momento 
\begin_inset Formula $\tau$
\end_inset

 uno stato 
\begin_inset Formula $S$
\end_inset

 puó avere nel proprio dominio 
\begin_inset Formula $D$
\end_inset

 un numero indeterminato di cellule che oscilla tra lo 0 e l’intera popolazione
 di cellule.
 Se chiamiamo però 
\begin_inset Formula $N_{s}$
\end_inset

 il numero di stati e 
\begin_inset Formula $N_{c}$
\end_inset

 il numero di cellule è lecito ipotizzare che in un qualunque momento 
\begin_inset Formula $\tau$
\end_inset

 il dominio sia approssimativamente 
\begin_inset Formula $D_{\tau}=\dfrac{N_{c}}{N_{s}}$
\end_inset

 , sempre a patto che l’automa creato sia in qualche modo 
\begin_inset Formula $equilibrato$
\end_inset

.
 In ogni istante ciascuno stato interroga le proprie cellule e, in base
 alle regole di transizione definite , quest’ultime sono in grado di abbandonare
 
\begin_inset Formula $S$
\end_inset

 per essere integrate in un nuovo stato.
 Questo meccanismo viene eseguito contemporaneamente da parte di tutti gli
 stati che sono in grado di applicare le proprie regole senza interferire
 con cellule estranee al proprio dominio.
 Al termine della procedura tutte le possibili transizioni sono state eseguite
 e una volta eseguito il refresh globale della scena l’intero algoritmo
 è pronto a ripartire.
 Si noti come l’intero processo venga virtualizzato da parte degli stati:
 essi applicano regole su ciascuna delle proprie cellule che a loro volta
 possono mutare il loro stato interno, ma sará solo al termine di ciascun
 ''colpo di clock'' del programma che le cellule renderanno visibile la
 loro transizione agli altri stati.
 Questo meccanismo di mutua esclusione tra gli stati impedisce loro di interferi
re, rendendo cosí possibile la parallelizzazione dei processi su un’unica
 griglia.
\end_layout

\begin_layout Subsection
Regole di transizione
\end_layout

\begin_layout Standard
Le regole di transizione regolano i processi di mutazione delle cellule
 in ogni momento.
 Sono completamente personalizzabili e si basano sui princìpi della logica
 booleana Ad ogni stato sono associate delle regole, in AND o in OR tra
 di loro, e ogni regola può assumere un valore booleano o il suo negato,
 il tutto a scelta dell’utente.
 Ogni complessa equazione booleana puó essere scomposta in proposizioni
 piú semplici che prendono il nome di 
\begin_inset Formula $proposizioni$
\end_inset

 
\begin_inset Formula $atomiche$
\end_inset

.
 Secondo il principio del terzo escluso della logica booleana ciascuna proposizi
one atomica ha un unico valore di veritá: vero o falso.
 Il programma è in grado, attraverso una combinazione di molteplici proposizioni
, di stabilire il valore di veritá di una generica regola o di una combinazione
 di regole ed di applicarle in tal senso.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Example
Per spiegare l’applicazione delle regole su una singola cella poniamo l’esempio
 che l’utente abbia scelto di controllare n (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{nNeighbors}
\end_layout

\end_inset

) celle vicine, e abbia richiesto che siano di un preciso stato.
 Per ogni cella, da 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{applyRules()}
\end_layout

\end_inset

 viene chiamata la funzione 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{ruleOnCell()}
\end_layout

\end_inset

 che applica la regola su una singola cella.
 Nel caso che prendiamo in considerazione 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{ruleOnCell()}
\end_layout

\end_inset

 chiama 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{anyRules()}
\end_layout

\end_inset

 che guarda i vicini della cella e vede se ce ne sono n, poi ritorna un
 booleano XOR 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{r.not}
\end_layout

\end_inset

, quest’ultimo è un valore booleano scelto dall’utente per chiedere una
 regola (false) o il suo contrario (true), nel caso voglia che non si verifichi
 una determinata situazione.
 Questo valore ritornato va a riempire un array di booleani che indicano
 il valore che hanno assunto tutte le regole applicate su quella cella (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{this.operator}
\end_layout

\end_inset

), il quale viene poi elaborato da deMorganator che applica le regole AND
 e OR sempre decise dall’utente in fase di creazione e gestisce lo stato
 che la cella assumerà al prossimo passo.
\end_layout

\begin_layout Example
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

private void applyRules() { 
\end_layout

\begin_layout Plain Layout

	for (Cell c : this.cells) { 
\end_layout

\begin_layout Plain Layout

		for (int i = 0; i < ruleSet.size(); i++) { 
\end_layout

\begin_layout Plain Layout

			this.operator[0][i] = ruleOnCell(c, ruleSet.get(i)); 
\end_layout

\begin_layout Plain Layout

		} 
\end_layout

\begin_layout Plain Layout

		if (deMorganator()) { 
\end_layout

\begin_layout Plain Layout

			c.futureId = this.toStatus; 
\end_layout

\begin_layout Plain Layout

		}else{c.futureId = this.id;} 
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

private boolean deMorganator() { 
\end_layout

\begin_layout Plain Layout

	boolean outcome = true && this.operator[0][0]; 
\end_layout

\begin_layout Plain Layout

	for (int i = 1; i < ruleSet.size(); i++) { 
\end_layout

\begin_layout Plain Layout

		if (this.operator[1][i]) { 
\end_layout

\begin_layout Plain Layout

			outcome &= this.operator[0][i]; 
\end_layout

\begin_layout Plain Layout

		} else {outcome |= this.operator[0][i];} 
\end_layout

\begin_layout Plain Layout

	} return outcome; 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

private boolean ruleOnCell(Cell c, Rule r) { 
\end_layout

\begin_layout Plain Layout

	if (r.any) { 
\end_layout

\begin_layout Plain Layout

		if(r.exact){return exactRule(r,c);} 
\end_layout

\begin_layout Plain Layout

		return anyRule(r, c); 
\end_layout

\begin_layout Plain Layout

		} return specificRule(r, c); 
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

private boolean anyRule(Rule r, Cell c) { 
\end_layout

\begin_layout Plain Layout

	int counter = 0; 
\end_layout

\begin_layout Plain Layout

	for (Cell near : c.nearby) { 
\end_layout

\begin_layout Plain Layout

		if (near.idStatus == r.nearStatus) { 
\end_layout

\begin_layout Plain Layout

		counter += 1; } 
\end_layout

\begin_layout Plain Layout

		if (counter == r.nNeighbors) { 
\end_layout

\begin_layout Plain Layout

		return true ^ r.not; 
\end_layout

\begin_layout Plain Layout

		} 
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

	return false ^ r.not; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\end_body
\end_document
